//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBM_EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HospitalEntities : DbContext
    {
        public HospitalEntities()
            : base("name=HospitalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Disease> Diseases { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Prescription> Prescriptions { get; set; }
        public virtual DbSet<PatientDiseaseRelation> PatientDiseaseRelations { get; set; }
        public virtual DbSet<DoctorsThatDontHaveAppointmentToday> DoctorsThatDontHaveAppointmentTodays { get; set; }
        public virtual DbSet<PatientsWaitingAppointment> PatientsWaitingAppointments { get; set; }
    
        public virtual int GivePrescription(Nullable<int> doctorID, Nullable<int> pdrID, string details, Nullable<int> cost)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var pdrIDParameter = pdrID.HasValue ?
                new ObjectParameter("pdrID", pdrID) :
                new ObjectParameter("pdrID", typeof(int));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GivePrescription", doctorIDParameter, pdrIDParameter, detailsParameter, costParameter);
        }
    
        public virtual int MakeAppointment(Nullable<int> pdrID, Nullable<int> doctorID, string details)
        {
            var pdrIDParameter = pdrID.HasValue ?
                new ObjectParameter("pdrID", pdrID) :
                new ObjectParameter("pdrID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MakeAppointment", pdrIDParameter, doctorIDParameter, detailsParameter);
        }
    }
}
